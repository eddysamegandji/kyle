---
openapi: 3.0.3
info:
  title: Kyle management API
  description: Internal API
  contact:
    name: Eddy Amegandji
    email: eddysamegandji@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: local development
tags:
  - name: "customer-resource"
  - name: "auth-resource"
  - name: "ticket-resource"
  - name: "typology-resource"
  - name: "skill-resource"
paths:
  /customers:
    get:
      summary: "Retrieve all the customers"
      tags: ["customer-resource"]
      operationId: getCustomers
#      security:
#        - basicAuth: []
      responses:
        '200':
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDto'
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

    post:
      summary: "Create a new customer"
      tags: ["customer-resource"]
      operationId: createCustomer
#      security:
#        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
      responses:
        '201':
          description: "A detailed customer"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  /customers/{id}:
    get:
      summary: "Retrieve details on customer"
      tags: [ "customer-resource" ]
      operationId: getCustomer
      parameters:
        - name: id
          description: "id of the customer."
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "A detailed customer"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '204':
          $ref: '#/components/responses/204'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

    put:
      summary: "Edit customer"
      tags: [ "customer-resource" ]
      operationId: editCustomer
#      security:
#        - basicAuth: [ ]
      parameters:
        - name: id
          description: "The id of the customer."
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
      responses:
        '200':
          description: "A detailed customer"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

    delete:
      summary: "Delete customer"
      tags: [ "customer-resource" ]
      operationId: deleteCustomer
      parameters:
        - name: id
          description: "id of the customer."
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: "Customer was deleted"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /tickets:
    get:
      summary: "Get list of tickets"
      tags: ["ticket-resource"]
      operationId: getTickets
      responses:
        '200':
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketDto'
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      summary: "Create a ticket"
      tags: ["ticket-resource"]
      operationId: createTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketDto'
      responses:
        '201':
          description: "A detailed ticket"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /typology:
    get:
      summary: "Retrieve all the typologies"
      tags: [ "typology-resource" ]
      operationId: getTypologies
      #      security:
      #        - basicAuth: []
      responses:
        '200':
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypologyDto'
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

    post:
      summary: "Create a new typology"
      tags: [ "typology-resource" ]
      operationId: createTypology
      #      security:
      #        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketTypologyDto'
      responses:
        '201':
          description: "A detailed typology"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypologyDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  /skills:
    get:
      summary: "Retrieve all the skills"
      tags: [ "skill-resource" ]
      operationId: getSkills
      #      security:
      #        - basicAuth: []
      responses:
        '200':
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillDto'
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

    post:
      summary: "Create a new skill"
      tags: [ "skill-resource" ]
      operationId: createSkill
      #      security:
      #        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillDto'
      responses:
        '201':
          description: "A detailed skill"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  /login:
    post:
      summary: "Login"
      tags: ["auth-resource"]
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

components:
  responses:
    '204':
      description: "No content"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '401':
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '403':
      description: "Forbidden"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '404':
      description: "Not found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    ApiError:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        path:
          type: string
        timestamp:
          type: number
          format: double
        message:
          type: string

    UserDto:
      type: object
      properties:
        userId:
          type: integer
        login:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        fullName:
          type: string
        email:
          type: string
        phone:
          type: string
        firstConnectionDate:
          type: string
          format: date-time
        lastConnectionDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        creationUserId:
          type: integer
        deleteDate:
          type: string
          format: date-time
        deleteUserId:
          type: integer
        active:
          type: boolean
          default: true
#        skills:
#          type: object
#          properties:
#            id:
#              type: integer

    CustomerDto:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        title:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        birthDate:
          type: string
          format: date-time
        birthCity:
          type: string
        birthDepartment:
          type: string
        address1:
          type: string
        address2:
          type: string
        zipCode:
          type: string
        city:
          type: string
        country:
          type: string
        mobilePhone:
          type: string
        emailAddress:
          type: string
        emailAddress2:
          type: string
        companyName:
          type: string
        companyPosition:
          type: string
        workPhone:
          type: string
        kbis:
          type: string
        fax:
          type: string
        vip:
          type: boolean

    LoginDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponseDto:
      type: object
      properties:
        isAuthenticated:
          type: boolean
          default: false
        accessToken:
          type: string
        refreshToken:
          type: string
        username:
          type: string
        roles:
          type: string

    TicketDto:
      type: object
      properties:
        ticketId:
          type: integer
          format: int64
        creationDate:
          type: string
          format: date-time
        creationSummary:
          type: string
        closingDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - TODO
            - RESERVED
            - INPROGRESS
            - PENDING
            - TOBEVALIDATED
            - COMPLETED
            - CANCELED
            - START
        typology:
          type: integer
          format: int64
        initialSkill:
          type: integer
          format: int64
        customer:
          type: integer
          format: int64
        lastModifiedDate:
          type: string
          format: date-time
        lastTicketActionComment:
          type: string
        priority:
          type: string
          enum:
            - VERYLOW
            - LOW
            - MEDIUM
            - HIGH
            - VERYHIGH
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    DelayHistoryDto:
      type: object
      properties:
        delayHistoryId:
          type: integer
          format: int64
        delayDate:
          type: string
          format: date-time
        delayComment:
          type: string

    TicketTypologyDto:
      type: object
      properties:
        ticketTypologyId:
          type: integer
          format: int64
        name:
          type: string
        active:
          type: boolean

    SkillDto:
      type: object
      properties:
        skillId:
          type: integer
          format: int64
        name:
          type: string
        numberOfUsers:
          type: integer
        numberOfTickets:
          type: integer